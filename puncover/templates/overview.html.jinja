{% extends "base.html.jinja" %}
{% block content %}

    <h2>Folders</h2>
    {% import 'lists.html.jinja' as lists with context %}
    {{ lists.directory(root_folders, []) }}

    <a class="btn btn-default" href="{{ url_for('all') }}">Show all symbols</a>
    <a class="btn btn-default" href="{{ url_for('rack') }}">Analyze text snippet</a>

    {% if user_defined_stack_report %}

    <h2>User-defined Stack Worst-Case Scenarios</h2>

    <div id="user_defined_stack_report"></div>

    <script>
        var user_defined_stack_report = {{user_defined_stack_report}};
        // set the dimensions and margins of the graph
        var barFull = 80;
        var margin = {top: 20, right: 30, bottom: 30, left: 120};
        var width = 960 - margin.left - margin.right;
        // 80px per thread stack bar
        var height = barFull*(Object.values(user_defined_stack_report).length+1) - margin.top - margin.bottom;
        var barH = height / Object.values(user_defined_stack_report).length;

        // append the svg object to the body of the page
        var svg = d3.select("#user_defined_stack_report")
        .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
        .append("g")
            .attr("class", "canvas")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        // List of function display_names
        var groups = Object.keys(user_defined_stack_report);

        var x = d3.scaleLinear()
            .domain([0, 100])
            .range([ 0, width]);
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");

        // Y axis
        var y = d3.scaleBand()
            .range([ 0, height ])
            .domain(groups.map(function(d) { return d; }))
            .padding(.1);
        svg.append("g")
            .call(d3.axisLeft(y))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)");

        var stacks = Object.entries(user_defined_stack_report);

        // Three function that change the tooltip when user hover / move / leave a cell
        var mouseover = function(d) {
            var subgroupName = d3.select(this.parentNode).datum().key;
            var subgroupValue = d.data[subgroupName];
            tooltip
                .html("subgroup: " + subgroupName + "<br>" + "Value: " + subgroupValue)
                .style("opacity", 1)
        }
        var mousemove = function(d) {
            tooltip
                .style("left", (d3.mouse(this)[0]+90) + "px") // It is important to put the +90: other wise the tooltip is exactly where the point is an it creates a weird effect
                .style("top", (d3.mouse(this)[1]) + "px")
        }
        var mouseleave = function(d) {
            tooltip
                .style("opacity", 0)
        }

        for(var i = 0; i<stacks.length; i++){
            var [name, stack] = stacks[i];
            var tracebacks = stack["call_stack"];
            var offset = 0;
            for(var j = 0; j<tracebacks.length; j++){
                var traceback = tracebacks[j];
                if(traceback["stack_size"]=="???") continue;
                var percentage = traceback["stack_size"] / stack["max_stack_size"];
                var rects = d3.select(".canvas").append("rect")
                    .attr("x", width * offset)
                    .attr("y", barH * i)
                    .attr("width", width * percentage)
                    .attr("height", barH - 15) //y.bandwidth()
                    .attr("fill", "red")
                    .attr("stroke", "black")
                    .on("mouseover", mouseover)
                    .on("mousemove", mousemove)
                    .on("mouseleave", mouseleave);
                offset += percentage;
            }
            var rects = d3.select(".canvas").append("rect")
                .attr("x", width * offset)
                .attr("y", barH * i)
                .attr("width", width * (1.-offset))
                .attr("height", barH - 15) //y.bandwidth()
                .attr("fill", "green")
                .attr("stroke", "black");
        }

        // ----------------
        // TODO: Create tooltip links to symbols
        // ----------------
        var tooltip = d3.select("#user_defined_stack_report")
        .append("div")
        .style("opacity", 0)
        .attr("class", "tooltip")
        .style("background-color", "white")
        .style("border", "solid")
        .style("border-width", "1px")
        .style("border-radius", "5px")
        .style("padding", "10px")

    </script>

    {% endif %}

{% endblock %}
